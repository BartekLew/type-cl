(include "categories.cl")

(defun basic-typecheck (test)
  (lambda (val)
    (if (apply test (list val)) val)))

(setf (check 'Int) (basic-typecheck #'integerp))
(setf (check 'String) (basic-typecheck #'stringp))
(setf (check 'Char) (basic-typecheck #'characterp))
(setf (check 'Symbol) (basic-typecheck #'symbolp))
(setf (check 'Number) (basic-typecheck #'numberp))
(setf (check 'List)
      (lambda (l &optional etype)
        (and (listp+ l)
             (or (not etype)
                 (not (position-if (lambda (x) (not (check etype x))) l))) l)))

(setf (check 'Function)
      (lambda (name &rest typespec)
        (let ((f (fn name))
              (rett (car (last typespec)))
              (argt (subseq typespec (- (length typespec) 1))))
          (and f (or (not typespec)
                     (loop for variant in f
                           do (cond ((functionp (first variant))
                                       (if (apply (first variant) (list rett argt))
                                         (return (second variant))))
                                    (t (if (equalp typespec (first variant))
                                        (return (second variant)))))))))))
        
(setf (check 'Any) (lambda (x) x))
